function ce_quadratic_subsys_params = define_ce_quadratic_model_parameters(initial_soc_percentage)

params_temp = Parameters_init_suppliedSOC_pct(initial_soc_percentage); % just to obtain the model parameters, use any arbitrary soc% as argument
% Remove any parameters which are not required in the PP2D model
params_to_remove = {'OperatingMode',...
    'lumped_thermal_version',...
    'suppress_status_prints',...
    'theta_max_pos',...
    'theta_max_neg',...
    'theta_min_pos',...
    'theta_min_neg',...
    'lumped_thermal_version',...
    'pouch_length',...
    'pouch_width',...
    'tab_area',...
    'len_al',...
    'len_cu',...
    'len_pouch',...
    'no_of_layers_Northrop_cell',...
    't_stack',...
    'Lambda_al',...
    'Lambda_p',...
    'Lambda_s',...
    'Lambda_n',...
    'Lambda_cu',...
    'Dp',...
    'Ds',...
    'Dn',...
    'rho_al',...
    'rho_p',...
    'rho_s',...
    'rho_n', ...
    'rho_cu',...
    'rho_LiPF6',...
    'rho_pouch',...
    'rho_pvdf',...
    'Tmax',...
    'Cpal',...
    'Cpp',...
    'Cps',...
    'Cpn',...
    'Cpcu',...
    'CpLiPF6',...
    'Cppouch',...
    'sig_al',...
    'sig_cu',...
    'eps_fi',...
    'brugg_p',...
    'brugg_s',...
    'brugg_n',...
    'hcell',...
    'sig',...
    'mass_cell',...
    'Cp_avg',...
    'surface_area_per_face_Northrop_cell',...
    'h_lumped',...
    'EaDps',...
    'EaDns',...
    'Eakip',...
    'Eakin',...
    'T_init',...
    'sim_datalog_interval',...
    'Nal',...
    'Ncu',...
    'Nr_p',...
    'Nr_n',...
    'daeFormulation',...
    'UseJacobian',...
    'w',...
    'I1C',...
    'Uref_s',...
    'i_0_jside',...
    'k_n_aging',...
    'M_n',...
    'R_SEI',...
    'EnableAgeing',...
    'RelTol',...
    'AbsTol',...
    'V_reference',...
    'SOC_estimation_function',...
    'ReactionRatesFunction',...
    'SolidDiffusionCoefficientsFunction',...
    'OpenCircuitPotentialFunction',...
    'ElectrolyteConductivityFunction',...
    'ElectrolyteDiffusionFunction',...
    'PowerDensityFunction',...
    'CurrentDensityFunction',...
    'extraData',...
    'PrintHeaderInfo',...
    'Scope',...
    'cs_sat_thresh',...
    'enable_csneg_Saturation_limit',...
    'cs_neg_saturation',...
    'cs_n_init',...
    'cs_p_init',...
    'k_s',...
    'cs_maxs',...
    'vol_fraction_solidphase',...
    'overall_surface_area_for_given_layers',...
    'Np',...
    'Ns',...
    'Nn',...
    'TemperatureEnabled',...
    'R',...
    'i_1C_density',...
    'Dps',...
    'Dns',...
    'a_i',...
    'k_p',...
    'k_n',...
    'cs_maxp',...
    'cs_maxn',...
    'Rp_p',...
    'Rp_n',...
    'sig_eff',...
    'SolidPhaseDiffusion',...
    'CutoffVoltage',...
    'CutoverVoltage',...
    'CutoffSOC',...
    'CutoverSOC',...
    'JacobianFunction',...
    };
ce_quadratic_subsys_params = rmfield(params_temp,params_to_remove);

ce_quadratic_subsys_params.A = params_temp.overall_surface_area_for_given_layers; % This shorter name is consistent with equations in publications and is easier to parse by eyes when written in code

params_temp.Np = 1; % This is set only so that the diffusion coefficients computed below is a scalar
params_temp.Ns = 1; % This is set only so that the diffusion coefficients computed below is a scalar
params_temp.Nn = 1; % This is set only so that the diffusion coefficients computed below is a scalar

ce_quadratic_subsys_params.De_eff_pos = electrolyteDiffusionCoefficients(params_temp.ce_init,params_temp.Tref,params_temp,'p');
ce_quadratic_subsys_params.De_eff_sep = electrolyteDiffusionCoefficients(params_temp.ce_init,params_temp.Tref,params_temp,'s');
ce_quadratic_subsys_params.De_eff_neg = electrolyteDiffusionCoefficients(params_temp.ce_init,params_temp.Tref,params_temp,'n');

end